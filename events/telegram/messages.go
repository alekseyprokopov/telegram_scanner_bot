package telegram

import (
	"fmt"
	"scanner_bot/config"
	"scanner_bot/handler"
	"strconv"
	"strings"
)

const (
	msgHelp = `–æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞, –±–ª–∞...–±–ª–∞...–•–æ—Å - –ª–æ—Ö.`

	msgHello = `Hello, motherfuckers`

	msgUnknownCommand = "Unknown command"

	msgSaved = "Saved!"

	msgAlreadyExists = "You have already have this page in your list"
)

func msgConfig(c *config.Configuration) string {
	userInfo := fmt.Sprintf("‚öô–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: id%d‚öô \n\n", c.ChatId)

	minValue := fmt.Sprintf("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d \n", c.UserConfig.MinValue)
	minSpread := fmt.Sprintf("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: %.1f \n", c.UserConfig.MinSpread)
	maxSpread := fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: %.1f \n", c.UserConfig.MaxSpread)
	payTypes := fmt.Sprintf("–ë–∞–Ω–∫–∏: %s \n \n", payTypesToString(c))

	var result strings.Builder
	result.WriteString(userInfo)
	result.WriteString(minValue)
	result.WriteString(minSpread)
	result.WriteString(maxSpread)
	result.WriteString(payTypes)

	return result.String()
}

func payTypesToString(c *config.Configuration) string {
	data := c.UserConfig.PayTypes
	var result []string
	for key, isActive := range data {
		if isActive {
			result = append(result, key)
		}
	}
	return strings.Join(result, ", ")
}

func msgChain(a *handler.Chain) string {
	buy := a.Buy
	sell := a.Sell

	buyPlatformInfo := fmt.Sprintf(
		"üî¥%s:\n–ü–æ–∫—É–ø–∫–∞: %s\n–ë–∞–Ω–∫: %s\n–¶–µ–Ω–∞: %f\n–ü—Ä–æ–¥–∞–≤–µ—Ü: %s\n–õ–∏–º–∏—Ç—ã : %.1f - %.1f(%s)\n–î–æ—Å—Ç—É–ø–Ω–æ : %.2f(%s)\n–°–¥–µ–ª–∫–∏: %d\n",
		strings.ToUpper(buy.PlatformName),
		strings.ToUpper(buy.Asset),
		buy.BankName,
		buy.Cost,
		buy.SellerName,
		buy.MinLimit, buy.MaxLimit, buy.Fiat,
		buy.Available, buy.Asset,
		buy.SellerDeals,
	)

	spotInfo := fmt.Sprintf("\n–ü–ê–†–ê: %s\n–¶–ï–ù–ê: %f\n\n", a.PairName, a.SpotPrice)
	if a.SpotName != "" {
		spotInfo = "\n–°–ü–û–¢: " + a.SpotName + spotInfo
	}
	sellPlatformInfo := fmt.Sprintf(
		"üî¥%s:\n–ü—Ä–æ–¥–∞–∂–∞: %s\n–ë–∞–Ω–∫: %s\n–¶–µ–Ω–∞: %f\n–ü—Ä–æ–¥–∞–≤–µ—Ü: %s\n–õ–∏–º–∏—Ç—ã : %.1f - %.1f(%s)\n–î–æ—Å—Ç—É–ø–Ω–æ : %.2f(%s)\n–°–¥–µ–ª–∫–∏: %d\n",
		strings.ToUpper(sell.PlatformName),
		strings.ToUpper(sell.Asset),
		sell.BankName,
		sell.Cost,
		sell.SellerName,
		sell.MinLimit, sell.MaxLimit, sell.Fiat,
		sell.Available, sell.Asset,
		sell.SellerDeals,
	)

	profit := fmt.Sprintf("\n–ü–†–û–§–ò–¢: %.3f\n", a.Profit)

	result := buyPlatformInfo + spotInfo + sellPlatformInfo + profit
	return result
}

func getResultMessage(data []handler.Chain) string {
	resultMessage := ""
	for i, item := range data {
		chainMessage := "#" + strconv.Itoa(i) + "\n" + msgChain(&item)
		resultMessage += chainMessage
	}
	return resultMessage
}
